/* Код честно спёр с https://github.com/NeverWalkAloner/primes/blob/master/sieves.go
ссылка из статьи https://habr.com/ru/post/468833/
Один из алгоритмов нахождения простых чисел
Решето Эратосфена — алгоритм, предложенный древнегреческим математиком Эратосфеном.
Этот метод позволяет найти все простые числа меньше заданного числа n.
Суть метода заключается в следующем. Возьмем набор чисел от 2 до n.
Вычеркнем из набора (отсеим) все числа делящиеся на 2, кроме 2.
Перейдем к следующему «не отсеянному» числу — 3, снова вычеркиваем все что делится на 3.
Переходим к следующему оставшемуся числу — 5 и так далее до тех пор пока мы не дойдем до n.
После выполнения вышеописанных действий, в изначальном списке останутся только простые числа.

Алгоритм можно несколько оптимизировать.
Так как один из делителей составного числа n обязательно меньше или равен корню из n,
алгоритм можно останавливать, после вычеркивания чисел делящихся на корень из n.

Сложность алгоритма составляет O(n log log n), при этом, для хранения информации о том,
какие числа были вычеркнуты требуется O(n) памяти.
*/

//комментарии на русском мои
package main

import (
	"fmt"
	"math"
)

// Eratosthenes returns list of all prime numbers less than n, Eratosthenes sieve is using
func Eratosthenes(n int) []int {
	arr := make([]bool, n)                               //создается массив булевых значений, где false - простое число, true - нет, самим числом является индекс массива
	for i := 2; i <= int(math.Sqrt(float64(n)+1)); i++ { // цикл от 2 до корня из n
		if arr[i] == false { // если в ячейке false, то индекс массива - число простое, все последующие числа кратные данному помечаем как не простые.
			for j := i * i; j < n; j += i {
				arr[j] = true
			}
		}
	}
	var primes []int // итоговый массив простых чисел, пока пустой

	for i, isComposite := range arr { //цикл по массиву, где i - индекс, isComposite - значение: false - простое число, true - нет
		if i > 1 && !isComposite { // в итоговый массив добавляем только простые числа
			primes = append(primes, i)
		}
	}

	return primes
}

func main() {
	var number int
	fmt.Print("Введите число: ")
	_, err := fmt.Scanln(&number)
	if err != nil {
		fmt.Println("Введено неверное значение. Попробуйте еще раз.")
		return
	}
	fmt.Println("Простые числа: ", Eratosthenes(number))

}
